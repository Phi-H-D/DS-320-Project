# -*- coding: utf-8 -*-
"""DS 320 Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19FZZCdWQJyPMEFXflp-V74y1a1xLXVpo
"""

import pandas as pd
import matplotlib.pyplot as plt

# Step 1: Data Integration
data_files = ['Worlds 2022 Main Event - Player Stats - OraclesElixir.csv',
              'Worlds 2021 Main Event - Player Stats - OraclesElixir.csv',
              'Worlds 2023 Main Event - Player Stats - OraclesElixir.csv',
              'Worlds 2019 Main Event - Player Stats - OraclesElixir.csv',
              'Worlds 2020 Main Event - Player Stats - OraclesElixir.csv']

data = pd.concat([pd.read_csv(file) for file in data_files], ignore_index=True)

# Step 2: Feature Engineering
data['KDA'] = (data['K'] + data['A']) / data['D']
data['Role'] = data['Pos']
data['W%'] = data['W%'].str.rstrip('%').astype(float) / 100
data['KP'] = data['KP'].str.rstrip('%').astype(float) / 100
data['DMG%'] = data['DMG%'].str.rstrip('%').astype(float) / 100

# Step 3: Analysis by Role
roles = data['Role'].unique()

for role in roles:
    role_data = data[data['GP'] >= 3].groupby(['Player', 'Role']).agg({
        'KDA': 'mean',
        'CSPM': 'mean',
        'DPM': 'mean',
        'DMG%': 'mean',
        'W%': 'mean',
        'CSD10': 'mean',
        'XPD10': 'mean',
        'KP': 'mean',
        'Player': 'count'
    }).rename(columns={'Player': 'Appearances'}).reset_index()

    role_data = role_data[role_data['Role'] == role]

    if role == 'Support':
        role_data['Composite_Score'] = role_data['KDA'] * 0.2 + role_data['W%'] * 0.3 + role_data['KP'] * 0.1 + role_data['Appearances'] * 0.2
    else:
        role_data['Composite_Score'] = role_data['KDA'] * 0.2 + role_data['W%'] * 0.3 + role_data['CSD10'] * 0.05 + role_data['XPD10'] * 0.05 + role_data['Appearances'] * 0.2

    role_data['Rank'] = role_data['Composite_Score'].rank(ascending=False)
    role_data.sort_values('Rank', inplace=True)

    print(f"Analysis for {role}:")
    print(role_data[['Player', 'Appearances', 'Composite_Score', 'Rank']])
    print()

# Step 4: Analysis by Team
team_data = data.groupby(['Team']).agg({
    'KDA': 'mean',
    'CSPM': 'mean',
    'DPM': 'mean',
    'DMG%': 'mean',
    'W%': 'mean',
    'CSD10': 'mean',
    'XPD10': 'mean',
    'Team': 'count'
}).rename(columns={'Team': 'Appearances'}).reset_index()

team_data['Appearances'] = team_data['Appearances']/5
team_data['Composite_Score'] = team_data['W%'] * 0.4 + team_data['Appearances'] * 0.6
team_data['Rank'] = team_data['Composite_Score'].rank(ascending=False)
team_data.sort_values('Rank', inplace=True)

print("Analysis by Team:")
print(team_data[['Team', 'Appearances', 'Composite_Score', 'Rank']])
print()

# Step 5: Overall Analysis
overall_data = data[data['GP'] >= 3].groupby(['Player']).agg({
    'KDA': 'mean',
    'CSPM': 'mean',
    'DPM': 'mean',
    'DMG%': 'mean',
    'W%': 'mean',
    'CSD10': 'mean',
    'XPD10': 'mean',
    'Player': 'count'
}).rename(columns={'Player': 'Appearances'}).reset_index()

overall_data['Composite_Score'] = overall_data['KDA'] * 0.2 + overall_data['W%'] * 0.3 + overall_data['CSD10'] * 0.05 + overall_data['XPD10'] * 0.05 + overall_data['Appearances'] * 0.2
overall_data['Rank'] = overall_data['Composite_Score'].rank(ascending=False)
overall_data.sort_values('Rank', inplace=True)

print("Overall Analysis:")
print(overall_data[['Player', 'Appearances', 'Composite_Score', 'Rank']])
print()

# Step 6: Visualization
fig, axs = plt.subplots(len(roles), 1, figsize=(12, 6 * len(roles)))

for i, role in enumerate(roles):
    role_data = data[data['GP'] >= 3].groupby(['Player', 'Role']).agg({
        'KDA': 'mean',
        'CSPM': 'mean',
        'DPM': 'mean',
        'DMG%': 'mean',
        'W%': 'mean',
        'CSD10': 'mean',
        'XPD10': 'mean',
        'KP': 'mean',
        'Player': 'count'
    }).rename(columns={'Player': 'Appearances'}).reset_index()

    role_data = role_data[role_data['Role'] == role]

    if role == 'Support':
        role_data['Composite_Score'] = role_data['KDA'] * 0.2 + role_data['W%'] * 0.3 + role_data['KP'] * 0.1 + role_data['Appearances'] * 0.2
    else:
        role_data['Composite_Score'] = role_data['KDA'] * 0.2 + role_data['W%'] * 0.3 + role_data['CSD10'] * 0.05 + role_data['XPD10'] * 0.05 + role_data['Appearances'] * 0.2

    role_data['Rank'] = role_data['Composite_Score'].rank(ascending=False)
    role_data.sort_values('Rank', inplace=True)

    axs[i].bar(role_data['Player'], role_data['Composite_Score'])
    axs[i].set_xlabel('Player')
    axs[i].set_ylabel('Composite Score')
    axs[i].set_title(f'{role} Rankings')
    axs[i].set_xticks(range(len(role_data)))
    axs[i].set_xticklabels(role_data['Player'], rotation=90)

plt.tight_layout()
plt.show()

fig, ax = plt.subplots(figsize=(10, 6))
ax.bar(team_data['Team'], team_data['Composite_Score'])
ax.set_xlabel('Team')
ax.set_ylabel('Composite Score')
ax.set_title('Team Rankings')
ax.set_xticks(range(len(team_data)))
ax.set_xticklabels(team_data['Team'], rotation=90)
plt.tight_layout()
plt.show()

fig, ax = plt.subplots(figsize=(10, 6))
ax.bar(overall_data['Player'], overall_data['Composite_Score'])
ax.set_xlabel('Player')
ax.set_ylabel('Composite Score')
ax.set_title('Overall Player Rankings')
ax.set_xticks(range(len(overall_data)))
ax.set_xticklabels(overall_data['Player'], rotation=90)
plt.tight_layout()
plt.show()